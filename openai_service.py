import openai
import base64
import logging
from typing import Dict, Optional
import json

logger = logging.getLogger(__name__)


class OpenAIService:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenAI API"""
    
    def __init__(self, api_key: str, model: str = "gpt-4o", vision_model: str = "gpt-4o"):
        self.api_key = api_key
        self.model = model
        self.vision_model = vision_model
        openai.api_key = api_key
        self.client = openai.OpenAI(api_key=api_key)
    
    async def analyze_text_food(self, text: str) -> Dict:
        """
        –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞/–±–ª—é–¥–∞
        
        Args:
            text: –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–ª–æ—Ä–∏—è—Ö –∏ –ë–ñ–£
        """
        try:
            system_prompt = """–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥ –∏ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. 
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –±–ª—é–¥, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è —Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–ª–æ—Ä–∏—è—Ö –∏ –ë–ñ–£.
–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:
{
    "product_name": "–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞",
    "weight": –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö (—á–∏—Å–ª–æ),
    "calories": –∫–∞–ª–æ—Ä–∏–∏ (—á–∏—Å–ª–æ),
    "protein": –±–µ–ª–∫–∏ –≤ –≥—Ä–∞–º–º–∞—Ö (—á–∏—Å–ª–æ),
    "fat": –∂–∏—Ä—ã –≤ –≥—Ä–∞–º–º–∞—Ö (—á–∏—Å–ª–æ),
    "carbs": —É–≥–ª–µ–≤–æ–¥—ã –≤ –≥—Ä–∞–º–º–∞—Ö (—á–∏—Å–ª–æ),
    "comparison": "—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏",
    "recommendations": "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é",
    "benefits": "–ø–æ–ª—å–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∞",
    "warnings": "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)"
}

–ï—Å–ª–∏ –≤–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –ø–æ—Ä—Ü–∏—é. –ë—É–¥—å —Ç–æ—á–Ω—ã–º –≤ —Ä–∞—Å—á–µ—Ç–∞—Ö."""

            response = self.client.chat.completions.create(
                model=self.model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –ø—Ä–æ–¥—É–∫—Ç/–±–ª—é–¥–æ: {text}"}
                ],
                temperature=0.7,
                response_format={"type": "json_object"}
            )
            
            result = json.loads(response.choices[0].message.content)
            logger.info(f"–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω: {result.get('product_name', 'unknown')}")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–µ–∫—Å—Ç–∞: {e}")
            raise
    
    async def analyze_food_image(self, image_bytes: bytes, user_text: Optional[str] = None) -> Dict:
        """
        –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞/–±–ª—é–¥–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Vision API
        
        Args:
            image_bytes: –ë–∞–π—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            user_text: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–ª–æ—Ä–∏—è—Ö –∏ –ë–ñ–£
        """
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
            base64_image = base64.b64encode(image_bytes).decode('utf-8')
            
            system_prompt = """–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥ –∏ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ —Å —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–æ–π –≤ –≤–∏–∑—É–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –±–ª—é–¥, –æ—Ü–µ–Ω–∏–≤–∞—è –∏—Ö —Å–æ—Å—Ç–∞–≤, –≤–µ—Å –∏ –ø–∏—â–µ–≤—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å.

–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:
{
    "product_name": "–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞/–±–ª—é–¥–∞",
    "weight": –ø—Ä–∏–º–µ—Ä–Ω—ã–π –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö (—á–∏—Å–ª–æ),
    "calories": –∫–∞–ª–æ—Ä–∏–∏ (—á–∏—Å–ª–æ),
    "protein": –±–µ–ª–∫–∏ –≤ –≥—Ä–∞–º–º–∞—Ö (—á–∏—Å–ª–æ),
    "fat": –∂–∏—Ä—ã –≤ –≥—Ä–∞–º–º–∞—Ö (—á–∏—Å–ª–æ),
    "carbs": —É–≥–ª–µ–≤–æ–¥—ã –≤ –≥—Ä–∞–º–º–∞—Ö (—á–∏—Å–ª–æ),
    "comparison": "—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ 2 —è–±–ª–æ–∫–∞–º)",
    "recommendations": "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é (–≤—Ä–µ–º—è –¥–Ω—è, —Å —á–µ–º —Å–æ—á–µ—Ç–∞–µ—Ç—Å—è)",
    "benefits": "–ø–æ–ª—å–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∞",
    "warnings": "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –≤—ã—Å–æ–∫–æ–π –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏, —Å–∞—Ö–∞—Ä–µ –∏ —Ç.–¥.",
    "quality_warning": "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ —Ñ–æ—Ç–æ –ø–ª–æ—Ö–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–ª–∏ –ø—Ä–æ–¥—É–∫—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω"
}

–í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ—Ü–µ–Ω–∏ —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ –∏ —Å–æ—Å—Ç–∞–≤ –±–ª—é–¥–∞. –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ—á—ë—Ç–∫–æ–µ –∏–ª–∏ —Ç–µ–º–Ω–æ–µ, —É–∫–∞–∂–∏ —ç—Ç–æ –≤ quality_warning."""

            user_message = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞/–±–ª—é–¥–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –µ–≥–æ –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –∏ –ë–ñ–£."
            if user_text:
                user_message += f"\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_text}"
            
            response = self.client.chat.completions.create(
                model=self.vision_model,
                messages=[
                    {"role": "system", "content": system_prompt},
                    {
                        "role": "user",
                        "content": [
                            {"type": "text", "text": user_message},
                            {
                                "type": "image_url",
                                "image_url": {
                                    "url": f"data:image/jpeg;base64,{base64_image}",
                                    "detail": "high"
                                }
                            }
                        ]
                    }
                ],
                temperature=0.7,
                max_tokens=1000,
                response_format={"type": "json_object"}
            )
            
            result = json.loads(response.choices[0].message.content)
            logger.info(f"–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω: {result.get('product_name', 'unknown')}")
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            raise
    
    def format_response(self, data: Dict, include_daily_stats: bool = False, 
                       daily_total: float = 0, daily_limit: int = 2000) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            data: –î–∞–Ω–Ω—ã–µ –æ—Ç OpenAI
            include_daily_stats: –í–∫–ª—é—á–∏—Ç—å –ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å
            daily_total: –û–±—â–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –∑–∞ –¥–µ–Ω—å
            daily_limit: –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞
            
        Returns:
            –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        try:
            product_name = data.get('product_name', '–ü—Ä–æ–¥—É–∫—Ç')
            weight = data.get('weight', 0)
            calories = data.get('calories', 0)
            protein = data.get('protein', 0)
            fat = data.get('fat', 0)
            carbs = data.get('carbs', 0)
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            response = f"üçΩ <b>–ü—Ä–æ–¥—É–∫—Ç:</b> {product_name}"
            if weight:
                response += f" ({weight} –≥)"
            response += f"\n\nüìä <b>–ö–∞–ª–æ—Ä–∏–∏:</b> {calories} –∫–∫–∞–ª\n"
            response += f"<b>–ë–µ–ª–∫–∏:</b> {protein} –≥ | <b>–ñ–∏—Ä—ã:</b> {fat} –≥ | <b>–£–≥–ª–µ–≤–æ–¥—ã:</b> {carbs} –≥\n"
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
            if data.get('comparison'):
                response += f"\nüí° <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ:</b> {data['comparison']}\n"
            
            # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            comment_parts = []
            if data.get('benefits'):
                comment_parts.append(data['benefits'])
            if data.get('recommendations'):
                comment_parts.append(data['recommendations'])
            if data.get('warnings'):
                comment_parts.append(f"‚ö†Ô∏è {data['warnings']}")
            
            if comment_parts:
                response += f"\nüí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {' '.join(comment_parts)}"
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∫–∞—á–µ—Å—Ç–≤–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if data.get('quality_warning'):
                response += f"\n\n‚ö†Ô∏è {data['quality_warning']}"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å
            if include_daily_stats:
                daily_total += calories
                percentage = (daily_total / daily_limit) * 100
                response += f"\n\nüìà <b>–ó–∞ —Å–µ–≥–æ–¥–Ω—è:</b> {daily_total:.0f} / {daily_limit} –∫–∫–∞–ª ({percentage:.1f}%)"
                
                if percentage > 100:
                    response += "\n‚ö†Ô∏è –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∞!"
                elif percentage > 80:
                    response += "\n‚ö° –ë–ª–∏–∑–∫–æ –∫ –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º–µ"
            
            return response
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö"
