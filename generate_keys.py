#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–ª—é—á–µ–π –¥–æ—Å—Ç—É–ø–∞:
 - 5 –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã—Ö
 - 20 –Ω–∞ 100 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 - 20 –Ω–∞ 50 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 - 20 –Ω–∞ 20 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫ –ù–ï –º–µ–Ω—è–µ—Ç —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏ –∏ –Ω–µ —Ç—Ä–æ–≥–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ.
–°–∫—Ä–∏–ø—Ç —Ç–æ–ª—å–∫–æ –î–û–ë–ê–í–õ–Ø–ï–¢ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–ª—é—á–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–≤—ã—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤.
"""
import asyncio
import sys
import secrets
import string
import aiosqlite
from database import Database
import config
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


TARGETS = {
    ('unlimited', None): 5,   # (key_type, image_limit) -> count
    ('limited', 100): 20,
    ('limited', 50): 20,
    ('limited', 20): 20,
}


def generate_key(prefix: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —á–∏—Ç–∞–µ–º—ã–π –∫–ª—é—á PREFIX-XXXX-XXXX (–±–µ–∑ –ø–æ—Ö–æ–∂–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤)."""
    alphabet = (string.ascii_uppercase.replace('O', '').replace('I', '') +
                string.digits.replace('0', '').replace('1', ''))
    def seg():
        return ''.join(secrets.choice(alphabet) for _ in range(4))
    return f"{prefix}-{seg()}-{seg()}"


def make_prefix(key_type: str, limit: int | None) -> str:
    if key_type == 'unlimited':
        return 'AILAB-UNLIM'
    if limit == 100:
        return 'AILAB-PRO100'
    if limit == 50:
        return 'AILAB-PLUS50'
    return 'AILAB-BASE20'


async def fetch_existing(db_path: str):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏ –∏ –∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    result = {
        ('unlimited', None): [],
        ('limited', 100): [],
        ('limited', 50): [],
        ('limited', 20): [],
    }
    async with aiosqlite.connect(db_path) as conn:
        conn.row_factory = aiosqlite.Row
        async with conn.execute("SELECT key_code, key_type, image_limit, activated_by FROM access_keys") as cur:
            async for row in cur:
                key = row['key_code']
                ktype = row['key_type']
                lim = row['image_limit']
                key_tuple = (ktype, lim)
                if key_tuple in result:
                    result[key_tuple].append((key, row['activated_by']))
    return result


async def add_missing_keys(db: Database, existing: dict):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–ª—é—á–∏ —Å–æ–≥–ª–∞—Å–Ω–æ TARGETS, –Ω–µ –∏–∑–º–µ–Ω—è—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ."""
    # –°–æ–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ —É–∂–µ –∑–∞–Ω—è—Ç—ã—Ö –∫–æ–¥–æ–≤ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –∫–æ–ª–ª–∏–∑–∏–π
    used_codes: set[str] = set()
    for keys in existing.values():
        for code, _ in keys:
            used_codes.add(code)

    # –î–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–±–∏–≤–∞–µ–º –¥–æ —Ü–µ–ª–µ–≤–æ–≥–æ —á–∏—Å–ª–∞
    for (key_type, limit), target in TARGETS.items():
        current = existing[(key_type, limit)]
        need = max(0, target - len(current))
        if need == 0:
            logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è {key_type}:{limit} —É–∂–µ —É–∫–æ–º–ø–ª–µ–∫—Ç–æ–≤–∞–Ω–∞ ({len(current)}/{target})")
            continue

        prefix = make_prefix(key_type, limit)
        logger.info(f"–î–æ–±–∞–≤–ª—è—é {need} –∫–ª—é—á(–µ–π) –¥–ª—è {key_type}:{limit}...")
        for _ in range(need):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥
            for _attempt in range(100):
                code = generate_key(prefix)
                if code not in used_codes:
                    break
            used_codes.add(code)
            await db.add_access_key(
                key_code=code,
                key_type=key_type,
                image_limit=limit
            )


async def save_all_keys_to_file(db_path: str, filename: str = 'access_keys.txt'):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –í–°–ï –∫–ª—é—á–∏ –≤ —Ñ–∞–π–ª (—Å –ø–æ–º–µ—Ç–∫–æ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö)."""
    sections = {
        ('unlimited', None): 'üîì –ë–ï–ó–õ–ò–ú–ò–¢–ù–´–ï –ö–õ–Æ–ß–ò (5 —à—Ç.)',
        ('limited', 100): 'üíé –ö–õ–Æ–ß–ò –ù–ê 100 –ê–ù–ê–õ–ò–ó–û–í (20 —à—Ç.)',
        ('limited', 50): '‚≠ê –ö–õ–Æ–ß–ò –ù–ê 50 –ê–ù–ê–õ–ò–ó–û–í (20 —à—Ç.)',
        ('limited', 20): 'üîê –ö–õ–Æ–ß–ò –ù–ê 20 –ê–ù–ê–õ–ò–ó–û–í (20 —à—Ç.)',
    }
    data = await fetch_existing(db_path)
    with open(filename, 'w', encoding='utf-8') as f:
        f.write('–ö–õ–Æ–ß–ò –î–û–°–¢–£–ü–ê\n')
        f.write('='*70 + '\n\n')
        for cat in [('unlimited', None), ('limited', 100), ('limited', 50), ('limited', 20)]:
            f.write(sections[cat] + '\n')
            f.write('-'*70 + '\n')
            items = sorted(data[cat], key=lambda x: (x[1] is not None, x[0]))  # –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–Ω–∏–∑/–≤–≤–µ—Ä—Ö
            for i, (code, activated_by) in enumerate(items, 1):
                mark = ' [ACTIVATED]' if activated_by is not None else ''
                f.write(f"{i:2d}. {code}{mark}\n")
            f.write('\n')


async def main():
    print('=' * 70)
    print('–ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–õ–Æ–ß–ï–ô (–∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–∞—è)')
    print('=' * 70)

    db = Database(config.DATABASE_PATH)
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î/—Ç–∞–±–ª–∏—Ü
    await db.init_db()

    # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
    existing = await fetch_existing(config.DATABASE_PATH)

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ (—É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º)
    await add_missing_keys(db, existing)

    # –ü–µ—Ä–µ—á–∏—Ç—ã–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ –≤ —Ñ–∞–π–ª
    await save_all_keys_to_file(config.DATABASE_PATH, 'access_keys.txt')

    # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É
    updated = await fetch_existing(config.DATABASE_PATH)
    print('\nüìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:')
    for (key_type, limit), target in TARGETS.items():
        cnt = len(updated[(key_type, limit)])
        print(f" - {key_type}:{limit} ‚Üí {cnt}/{target}")

    print('\n‚úÖ –ì–û–¢–û–í–û!\n')
    print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {config.DATABASE_PATH}")
    print(f"–§–∞–π–ª –∫–ª—é—á–µ–π: access_keys.txt")


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('\n\n‚ö†Ô∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)
