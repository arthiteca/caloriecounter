import secrets
import string
from typing import Optional, Dict
import logging

logger = logging.getLogger(__name__)


class AuthKeyManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    
    KEY_LENGTH = 24
    
    @staticmethod
    def generate_key() -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–ª—é—á–∞"""
        alphabet = string.ascii_letters + string.digits
        return ''.join(secrets.choice(alphabet) for _ in range(AuthKeyManager.KEY_LENGTH))
    
    @staticmethod
    def generate_keys(count: int, limit: Optional[int] = None) -> list:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∫–ª—é—á–µ–π
        
        Args:
            count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π
            limit: –õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π (None = –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π)
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª—é—á–∞—Ö
        """
        keys = []
        for i in range(count):
            key = AuthKeyManager.generate_key()
            keys.append({
                'key': key,
                'limit': limit,
                'key_type': 'unlimited' if limit is None else 'limited'
            })
        return keys
    
    @staticmethod
    def format_key_for_display(key: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (xxxx-xxxx-xxxx-xxxx)"""
        # –†–∞–∑–±–∏–≤–∞–µ–º –∫–ª—é—á –Ω–∞ –≥—Ä—É–ø–ø—ã –ø–æ 6 —Å–∏–º–≤–æ–ª–æ–≤
        parts = [key[i:i+6] for i in range(0, len(key), 6)]
        return '-'.join(parts)


def generate_default_keys() -> Dict:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–±–æ—Ä–∞ –∫–ª—é—á–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:
    - 10 –∫–ª—é—á–µ–π —Å –ª–∏–º–∏—Ç–æ–º 20 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    - 1 –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –∫–ª—é—á
    
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ç–∏–ø–∞–º–∏ –∫–ª—é—á–µ–π
    """
    result = {
        'limited_keys': [],
        'unlimited_keys': []
    }
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 10 –∫–ª—é—á–µ–π —Å –ª–∏–º–∏—Ç–æ–º
    limited = AuthKeyManager.generate_keys(count=10, limit=20)
    result['limited_keys'] = limited
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è 1 –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
    unlimited = AuthKeyManager.generate_keys(count=1, limit=None)
    result['unlimited_keys'] = unlimited
    
    logger.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(limited)} –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –∏ {len(unlimited)} –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π")
    
    return result


def save_keys_to_file(keys_data: Dict, filename: str = 'access_keys.txt'):
    """
    –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–π –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    
    Args:
        keys_data: –°–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏
        filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    with open(filename, 'w', encoding='utf-8') as f:
        f.write("=" * 70 + "\n")
        f.write("–ö–õ–Æ–ß–ò –î–û–°–¢–£–ü–ê –ö TELEGRAM-–ë–û–¢–£ –î–õ–Ø –ü–û–î–°–ß–Å–¢–ê –ö–ê–õ–û–†–ò–ô\n")
        f.write("=" * 70 + "\n\n")
        
        # –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∫–ª—é—á–∏
        if keys_data['unlimited_keys']:
            f.write("üîì –ë–ï–ó–õ–ò–ú–ò–¢–ù–´–ô –ö–õ–Æ–ß (–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ):\n")
            f.write("-" * 70 + "\n")
            for idx, key_info in enumerate(keys_data['unlimited_keys'], 1):
                key = key_info['key']
                formatted = AuthKeyManager.format_key_for_display(key)
                f.write(f"{idx}. {key}\n")
                f.write(f"   –§–æ—Ä–º–∞—Ç: {formatted}\n")
                f.write(f"   –õ–∏–º–∏—Ç: –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π\n\n")
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏
        if keys_data['limited_keys']:
            f.write("\nüîê –ö–õ–Æ–ß–ò –° –õ–ò–ú–ò–¢–û–ú (20 –∞–Ω–∞–ª–∏–∑–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∫–∞–∂–¥—ã–π):\n")
            f.write("-" * 70 + "\n")
            for idx, key_info in enumerate(keys_data['limited_keys'], 1):
                key = key_info['key']
                formatted = AuthKeyManager.format_key_for_display(key)
                limit = key_info['limit']
                f.write(f"{idx}. {key}\n")
                f.write(f"   –§–æ—Ä–º–∞—Ç: {formatted}\n")
                f.write(f"   –õ–∏–º–∏—Ç: {limit} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n")
        
        f.write("\n" + "=" * 70 + "\n")
        f.write("–ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨:\n")
        f.write("-" * 70 + "\n")
        f.write("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –≤ Telegram\n")
        f.write("2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: /activate\n")
        f.write("3. –í–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –∫–ª—é—á–µ–π –≤—ã—à–µ\n")
        f.write("4. –ù–∞—á–Ω–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞!\n\n")
        f.write("–í–ê–ñ–ù–û:\n")
        f.write("‚Ä¢ –û–¥–∏–Ω –∫–ª—é—á –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑\n")
        f.write("‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ –∏–º–µ—é—Ç –ª–∏–º–∏—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –ê–ù–ê–õ–ò–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô\n")
        f.write("‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤ –ª–∏–º–∏—Ç–µ\n")
        f.write("‚Ä¢ –ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç—Å—è –∫ –≤–∞—à–µ–º—É Telegram ID\n")
        f.write("=" * 70 + "\n")
    
    logger.info(f"–ö–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")


if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π
    logging.basicConfig(level=logging.INFO)
    
    print("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π –¥–æ—Å—Ç—É–ø–∞...")
    keys = generate_default_keys()
    
    save_keys_to_file(keys)
    
    print("\n‚úÖ –ö–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ access_keys.txt")
    print(f"   ‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π: {len(keys['unlimited_keys'])}")
    print(f"   ‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π: {len(keys['limited_keys'])}")
