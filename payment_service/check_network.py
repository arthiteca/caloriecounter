import requests
import socket
import subprocess
import sys
from flask import Flask
import threading
import time
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from config import SERVER_IP, SERVER_PORT, WEBHOOK_URL

def check_external_ip():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ IP –∞–¥—Ä–µ—Å–∞"""
    try:
        response = requests.get('https://api.ipify.org', timeout=5)
        external_ip = response.text.strip()
        print(f"üåê –í–∞—à –≤–Ω–µ—à–Ω–∏–π IP: {external_ip}")
        
        if external_ip == SERVER_IP:
            print("‚úÖ –≠—Ç–æ –≤–∞—à IP - –æ—Ç–ª–∏—á–Ω–æ!")
            return True, external_ip
        else:
            print(f"‚ö†Ô∏è IP –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ ({SERVER_IP})")
            return True, external_ip
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP: {e}")
        return False, None

def check_port_availability(port=None):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞"""
    if port is None:
        port = SERVER_PORT
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        result = sock.connect_ex(('localhost', port))
        sock.close()
        
        if result == 0:
            print(f"‚ùå –ü–æ—Ä—Ç {port} —É–∂–µ –∑–∞–Ω—è—Ç")
            return False
        else:
            print(f"‚úÖ –ü–æ—Ä—Ç {port} —Å–≤–æ–±–æ–¥–µ–Ω")
            return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞: {e}")
        return False

def start_test_server(port=None):
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    if port is None:
        port = SERVER_PORT
    app = Flask(__name__)
    
    @app.route('/')
    def hello():
        return """
        <!DOCTYPE html>
        <html>
        <head>
            <title>–¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –°–ë–ü</title>
            <meta charset="utf-8">
        </head>
        <body>
            <h1>‚úÖ –°–µ—Ä–≤–µ—Ä –°–ë–ü —Ä–∞–±–æ—Ç–∞–µ—Ç!</h1>
            <p>–í–∞—à —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –¥–ª—è –ø—Ä–∏–µ–º–∞ webhook'–æ–≤ –æ—Ç –°–ë–ü</p>
            <p>IP: {SERVER_IP}</p>
            <p>–ü–æ—Ä—Ç: {port}</p>
            <p>Webhook URL: {WEBHOOK_URL}</p>
        </body>
        </html>
        """.format(SERVER_IP, port, WEBHOOK_URL)
    
    @app.route('/webhook/sbp', methods=['POST', 'GET'])
    def webhook_sbp():
        if request.method == 'POST':
            data = request.get_json()
            print(f"üì® –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç –°–ë–ü: {data}")
            return {"status": "ok", "message": "Webhook –ø–æ–ª—É—á–µ–Ω"}
        else:
            return """
            <!DOCTYPE html>
            <html>
            <head>
                <title>Webhook –°–ë–ü</title>
                <meta charset="utf-8">
            </head>
            <body>
                <h1>üîó Webhook –°–ë–ü –≥–æ—Ç–æ–≤!</h1>
                <p>–≠—Ç–æ—Ç endpoint –≥–æ—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –°–ë–ü</p>
                <p>URL: {WEBHOOK_URL}</p>
            </body>
            </html>
            """.format(WEBHOOK_URL)
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
    print(f"üì± –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å: http://localhost:{port}")
    print(f"üåê –í–Ω–µ—à–Ω–∏–π –∞–¥—Ä–µ—Å: http://{SERVER_IP}:{port}")
    print(f"üîó Webhook URL: {WEBHOOK_URL}")
    print("‚èπÔ∏è  –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    app.run(host='0.0.0.0', port=port, debug=False)

def test_external_access(port=None):
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑–≤–Ω–µ"""
    if port is None:
        port = SERVER_PORT
    print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ {SERVER_IP}:{port}...")
    
    try:
        response = requests.get(f'http://{SERVER_IP}:{port}', timeout=10)
        if response.status_code == 200:
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞!")
            return True
        else:
            print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥: {response.status_code})")
            return False
    except Exception as e:
        print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞: {e}")
        print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   - –§–∞–π—Ä–≤–æ–ª –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ—Ä—Ç")
        print("   - –†–æ—É—Ç–µ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –ø—Ä–æ–±—Ä–æ—Å –ø–æ—Ä—Ç–æ–≤")
        print("   - –ü—Ä–æ–≤–∞–π–¥–µ—Ä –±–ª–æ–∫–∏—Ä—É–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
        return False

def main():
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –°–ë–ü")
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º IP
    is_white_ip, external_ip = check_external_ip()
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞
    port = SERVER_PORT
    if not check_port_availability(port):
        port = SERVER_PORT + 1
        if not check_port_availability(port):
            print("‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤")
            return
    
    print(f"\nüéØ –í–∞—à webhook URL –¥–ª—è –°–ë–ü:")
    print(f"   {WEBHOOK_URL}")
    
    print(f"\nüìã –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:")
    print(f"1. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä: python payment_server.py")
    print(f"2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–≤–Ω–µ")
    print(f"3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –°–ë–ü —Å —ç—Ç–∏–º URL")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä
    try:
        start_test_server(port)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    main()
