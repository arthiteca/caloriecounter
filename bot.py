import logging
import asyncio
from io import BytesIO
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)
from telegram.constants import ParseMode

import config
from database import Database
from openai_service import OpenAIService
from payment_buttons import PaymentButtons, PaymentMessages
from payment_handler import PaymentHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=getattr(logging, config.LOG_LEVEL),
    handlers=[
        logging.FileHandler(config.LOG_FILE, encoding='utf-8'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)


class CalorieCounterBot:
    """Telegram-–±–æ—Ç –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–∞–ª–æ—Ä–∏–π"""
    
    def __init__(self):
        self.db = Database(config.DATABASE_PATH)
        self.openai_service = OpenAIService(
            api_key=config.OPENAI_API_KEY,
            model=config.OPENAI_MODEL,
            vision_model=config.OPENAI_VISION_MODEL
        )
        self.payment_handler = PaymentHandler(self.db)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        await self.db.add_user(user.id, user.username, user.first_name)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ –∫–ª—é—á
        access_info = await self.db.check_user_access(user.id)
        
        if not access_info.get('has_access') and not access_info.get('key_type'):
            welcome_message = f"""üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏! ü•ó

<b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ üì∑ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –µ–¥—É –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö
‚Ä¢ üîç –û–ø—Ä–µ–¥–µ–ª—è—Ç—å –∫–∞–ª–æ—Ä–∏–∏ –∏ –ë–ñ–£ (–±–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã)
‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π
‚Ä¢ üí° –î–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é

üîê <b>–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞:</b>
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /activate –∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª—é—á.

üíé <b>–ü–æ–∫—É–ø–∫–∞ –∫–ª—é—á–µ–π:</b> @unrealartur
üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @unrealartur

<i>Made by AI LAB</i>

‚ùì –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–ª–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏"""
        else:
            welcome_message = f"""üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏! ü•ó

<b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ üì∑ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –µ–¥—É –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö
‚Ä¢ üîç –û–ø—Ä–µ–¥–µ–ª—è—Ç—å –∫–∞–ª–æ—Ä–∏–∏ –∏ –ë–ñ–£ (–±–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã)
‚Ä¢ üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π
‚Ä¢ üí° –î–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é

<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
üì∑ <b>–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –±–ª—é–¥–∞</b> - —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–∞–ª–æ—Ä–∏–∏
üìä –ò—Å–ø–æ–ª—å–∑—É–π /stats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –¥–µ–Ω—å
üîë –ò—Å–ø–æ–ª—å–∑—É–π /key_info –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–º –∫–ª—é—á–µ
‚ùì –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–º–æ—â–∏

<b>‚ö†Ô∏è –í–∞–∂–Ω–æ:</b> –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç <b>—Ç–æ–ª—å–∫–æ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏!</b>

üíé <b>–ü–æ–∫—É–ø–∫–∞ –∫–ª—é—á–µ–π:</b> @unrealartur
üìû <b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:</b> @unrealartur

<i>Made by AI LAB</i>

–î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ —Å–≤–æ–µ–≥–æ –±–ª—é–¥–∞! üì∏"""
        
        await update.message.reply_text(
            welcome_message,
            parse_mode=ParseMode.HTML
        )
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id} ({user.username})")
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """üìö <b>–ü–æ–º–æ—â—å</b>

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/payment - üíé –ö—É–ø–∏—Ç—å –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞
/activate - –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞
/key_info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∫–ª—é—á–µ
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/history - –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/reset - –°–±—Ä–æ—Å–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è

<b>–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:</b>
üì∑ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –§–û–¢–û –≤–∞—à–µ–≥–æ –±–ª—é–¥–∞</b>

‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ë–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç <b>—Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!</b>
‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è
‚Ä¢ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è
‚Ä¢ –ù—É–∂–Ω–æ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ –µ–¥—ã

<b>üí° –°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:</b>
‚Ä¢ –°–Ω–∏–º–∞–π—Ç–µ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏
‚Ä¢ –°–Ω–∏–º–∞–π—Ç–µ —Å–≤–µ—Ä—Ö—É –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–±–∑–æ—Ä–∞ –±–ª—é–¥–∞
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –µ–¥–∞ —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–∞ –∏ –Ω–µ —Ä–∞–∑–º—ã—Ç–∞
‚Ä¢ –ú–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ —Å —É—Ç–æ—á–Ω–µ–Ω–∏—è–º–∏

<b>–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>
1Ô∏è‚É£ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –≤–∞—à–µ –±–ª—é–¥–æ üì∏
2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –º–Ω–µ
3Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –∫–∞–ª–æ—Ä–∏–π –∏ –ë–ñ–£!

üíé <b>–ü–æ–∫—É–ø–∫–∞ –∫–ª—é—á–µ–π:</b> @unrealartur
üìû <b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:</b> @unrealartur

<i>Made by AI LAB</i>

–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—É—é –æ—Ü–µ–Ω–∫—É! üí™"""
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.HTML)
    
    async def payment_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /payment - –º–µ–Ω—é –æ–ø–ª–∞—Ç—ã"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –∫–ª—é—á
        access_info = await self.db.check_user_access(user_id)
        if access_info['has_access'] or access_info.get('key_type'):
            await update.message.reply_text(
                f"‚úÖ –£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∫–ª—é—á!\n\n"
                f"üìä {access_info['message']}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /key_info –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
                parse_mode=ParseMode.HTML
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –æ–ø–ª–∞—Ç—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await update.message.reply_text(
            PaymentMessages.get_payment_menu_text(),
            reply_markup=PaymentButtons.get_payment_menu(),
            parse_mode=ParseMode.HTML
        )
    
    async def activate_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /activate - –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –∫–ª—é—á
        access_info = await self.db.check_user_access(user_id)
        if access_info['has_access'] or access_info.get('key_type'):
            await update.message.reply_text(
                f"‚úÖ –£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∫–ª—é—á!\n\n"
                f"üìä {access_info['message']}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /key_info –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
                parse_mode=ParseMode.HTML
            )
            return
        
        # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∫–ª—é—á
        await update.message.reply_text(
            "üîë <b>–ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞.\n"
            "–ö–ª—é—á –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞.\n\n"
            "–§–æ—Ä–º–∞—Ç: XXXX-XXXX-XXXX-XXXX –∏–ª–∏ —Å–ª–∏—Ç–Ω–æ\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
            parse_mode=ParseMode.HTML
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ –∫–ª—é—á–∞
        context.user_data['awaiting_key'] = True
    
    async def key_info_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /key_info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—é—á–µ"""
        user_id = update.effective_user.id
        
        access_info = await self.db.check_user_access(user_id)
        
        if not access_info.get('has_access') and not access_info.get('key_type'):
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /activate –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á–∞ –¥–æ—Å—Ç—É–ø–∞.",
                parse_mode=ParseMode.HTML
            )
            return
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª—é—á–µ
        key_type = access_info.get('key_type', 'unknown')
        
        if key_type == 'unlimited':
            info_message = f"""üîì <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∫–ª—é—á–µ</b>

<b>–¢–∏–ø:</b> –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π
<b>–°—Ç–∞—Ç—É—Å:</b> ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω

<b>–î–æ—Å—Ç—É–ø:</b>
‚Ä¢ ‚úÖ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ

–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π! üéâ

üì∑ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b> –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏!"""
        
        else:  # limited
            images_used = access_info.get('images_used', 0)
            images_left = access_info.get('images_left', 0)
            
            status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if access_info['has_access'] else "‚ùå –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω"
            
            info_message = f"""üîê <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∫–ª—é—á–µ</b>

<b>–¢–∏–ø:</b> –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π
<b>–°—Ç–∞—Ç—É—Å:</b> {status}

<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>
‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–æ—Ç–æ: {images_used}
‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –∞–Ω–∞–ª–∏–∑–æ–≤: {images_left}

<b>–î–æ—Å—Ç—É–ø:</b>
‚Ä¢ {"‚úÖ" if images_left > 0 else "‚ùå"} –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {images_left} —à—Ç.

üì∑ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b> –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏!"""
            
            if images_left <= 5 and images_left > 0:
                info_message += "\n\n‚ö†Ô∏è –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ –∞–Ω–∞–ª–∏–∑–æ–≤!"
            elif images_left == 0:
                info_message += "\n\n‚ùå –õ–∏–º–∏—Ç –∞–Ω–∞–ª–∏–∑–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω."
                info_message += "\n\nüíé <b>–ü–æ–∫—É–ø–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞:</b> @unrealartur"
                info_message += "\n<i>Made by AI LAB</i>"
        
        await update.message.reply_text(info_message, parse_mode=ParseMode.HTML)
    
    async def payment_callback_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫ –æ–ø–ª–∞—Ç—ã"""
        await self.payment_handler.handle_payment_callback(update, context)
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å"""
        user_id = update.effective_user.id
        
        stats = await self.db.get_daily_calories(user_id)
        daily_limit = await self.db.get_user_daily_limit(user_id)
        
        total_calories = stats['total_calories']
        percentage = (total_calories / daily_limit) * 100 if daily_limit > 0 else 0
        
        stats_message = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è</b>

üî• <b>–ö–∞–ª–æ—Ä–∏–∏:</b> {total_calories:.0f} / {daily_limit} –∫–∫–∞–ª ({percentage:.1f}%)
üçó <b>–ë–µ–ª–∫–∏:</b> {stats['total_protein']:.1f} –≥
ü•ë <b>–ñ–∏—Ä—ã:</b> {stats['total_fat']:.1f} –≥
üçû <b>–£–≥–ª–µ–≤–æ–¥—ã:</b> {stats['total_carbs']:.1f} –≥

üçΩ <b>–ü—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏:</b> {stats['meal_count']}
"""
        
        if percentage > 100:
            stats_message += "\n‚ö†Ô∏è –î–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∞!"
        elif percentage > 80:
            stats_message += "\n‚ö° –ë–ª–∏–∑–∫–æ –∫ –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ä–º–µ"
        elif percentage < 50:
            stats_message += "\n‚úÖ –ï—â—ë –º–Ω–æ–≥–æ –∑–∞–ø–∞—Å–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"
        
        await update.message.reply_text(stats_message, parse_mode=ParseMode.HTML)
    
    async def history_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∑–∞ –¥–µ–Ω—å"""
        user_id = update.effective_user.id
        
        meals = await self.db.get_user_meals_today(user_id)
        
        if not meals:
            await update.message.reply_text(
                "üìù –°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –ø—Ä–∏—ë–º–∞—Ö –ø–∏—â–∏.\n–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª—é–¥–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
                parse_mode=ParseMode.HTML
            )
            return
        
        history_message = "üìù <b>–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n"
        
        for i, meal in enumerate(meals, 1):
            meal_time = meal['meal_time'].split()[1][:5]  # –¢–æ–ª—å–∫–æ –≤—Ä–µ–º—è HH:MM
            history_message += f"{i}. <b>{meal['product_name']}</b>\n"
            if meal['weight']:
                history_message += f"   üìè {meal['weight']} –≥\n"
            history_message += f"   üî• {meal['calories']:.0f} –∫–∫–∞–ª | "
            history_message += f"–ë: {meal['protein']:.1f}–≥ –ñ: {meal['fat']:.1f}–≥ –£: {meal['carbs']:.1f}–≥\n"
            history_message += f"   üïê {meal_time}\n\n"
        
        await update.message.reply_text(history_message, parse_mode=ParseMode.HTML)
    
    async def reset_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–±—Ä–æ—Å–µ (–¥–∞–Ω–Ω—ã–µ –Ω–µ —É–¥–∞–ª—è—é—Ç—Å—è)"""
        await update.message.reply_text(
            "‚ÑπÔ∏è –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –ø–æ –¥–Ω—è–º.\n"
            "–ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –¥–µ–Ω—å —Å—á—ë—Ç—á–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω—É–ª—è.\n"
            "–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—à–ª—ã—Ö –¥–Ω–µ–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è.",
            parse_mode=ParseMode.HTML
        )
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ –∫–ª—é—á–∞
        if context.user_data.get('awaiting_key'):
            context.user_data['awaiting_key'] = False
            
            # –û—á–∏—Å—Ç–∫–∞ –∫–ª—é—á–∞ –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –¥–µ—Ñ–∏—Å–æ–≤
            key_code = text.replace('-', '').replace(' ', '').strip()
            
            # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª—é—á–∞
            result = await self.db.activate_key(key_code, user_id)
            
            if result['success']:
                key_type = result['key_type']
                limit = result.get('image_limit')
                
                if key_type == 'unlimited':
                    message = f"""‚úÖ <b>–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>

üîì –¢–∏–ø: –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π
‚ú® –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É!

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π!

üì∑ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ –±–ª—é–¥–∞ –∏ –Ω–∞—á–Ω–∏—Ç–µ!</b> üéâ"""
                else:
                    message = f"""‚úÖ <b>–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>

üîê –¢–∏–ø: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π
üìä –õ–∏–º–∏—Ç: {limit} –∞–Ω–∞–ª–∏–∑–æ–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å {limit} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –±–ª—é–¥!

üì∑ <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ –±–ª—é–¥–∞ –∏ –Ω–∞—á–Ω–∏—Ç–µ!</b> üöÄ"""
                
                await update.message.reply_text(message, parse_mode=ParseMode.HTML)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –∫–ª—é—á —Ç–∏–ø–∞ {key_type}")
            else:
                await update.message.reply_text(
                    f"‚ùå {result['message']}\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /activate –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏.",
                    parse_mode=ParseMode.HTML
                )
            
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ - –Ω—É–∂–µ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á
        access_info = await self.db.check_user_access(user_id)
        if not access_info.get('has_access') and not access_info.get('key_type'):
            await update.message.reply_text(
                "üîí <b>–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞.</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /activate –∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª—é—á.",
                parse_mode=ParseMode.HTML
            )
            return
        
        # –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
        await update.message.reply_text(
            "üì∑ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –µ–¥—ã</b>\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç <b>—Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</b> –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –±–ª—é–¥.\n\n"
            "‚úÖ –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:\n"
            "1. –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –≤–∞—à—É –µ–¥—É\n"
            "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –º–Ω–µ\n"
            "3. –ü–æ–ª—É—á–∏—Ç–µ –∞–Ω–∞–ª–∏–∑ –∫–∞–ª–æ—Ä–∏–π –∏ –ë–ñ–£\n\n"
            "üí° <b>–°–æ–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:</b>\n"
            "‚Ä¢ –°–Ω–∏–º–∞–π—Ç–µ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏\n"
            "‚Ä¢ –°–Ω–∏–º–∞–π—Ç–µ —Å–≤–µ—Ä—Ö—É –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–±–∑–æ—Ä–∞\n"
            "‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –µ–¥–∞ —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–∞\n\n"
            "–ñ–¥—É –≤–∞—à–µ —Ñ–æ—Ç–æ! üì∏",
            parse_mode=ParseMode.HTML
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ñ–æ—Ç–æ")
    
    async def handle_voice_audio(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∞—É–¥–∏–æ"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ - –Ω—É–∂–µ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á
        access_info = await self.db.check_user_access(user_id)
        if not access_info.get('has_access') and not access_info.get('key_type'):
            await update.message.reply_text(
                "üîí <b>–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞.</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /activate –∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª—é—á.",
                parse_mode=ParseMode.HTML
            )
            return
        
        await update.message.reply_text(
            "üé§ <b>–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è</b>\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç <b>—Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</b> –µ–¥—ã.\n\n"
            "üì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Ñ–æ—Ç–æ</b> –≤–∞—à–µ–≥–æ –±–ª—é–¥–∞!",
            parse_mode=ParseMode.HTML
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∞—É–¥–∏–æ/–≥–æ–ª–æ—Å")
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
        access_info = await self.db.check_user_access(user_id)
        
        if not access_info.get('has_access'):
            if not access_info.get('key_type'):
                # –ö–ª—é—á –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤–æ–æ–±—â–µ
                await update.message.reply_text(
                    "üîí –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /activate –∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª—é—á.",
                    parse_mode=ParseMode.HTML
                )
            else:
                # –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω
                await update.message.reply_text(
                    f"‚ùå {access_info['message']}\n\n"
                    "–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –∞–Ω–∞–ª–∏–∑–æ–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.\n\n"
                    "üíé <b>–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞:</b>\n"
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @unrealartur\n\n"
                    "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @unrealartur\n\n"
                    "<i>Made by AI LAB</i>",
                    parse_mode=ParseMode.HTML
                )
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
        if not await self.db.check_rate_limit(user_id, minutes=1, max_requests=config.MAX_REQUESTS_PER_MINUTE):
            await update.message.reply_text(
                "‚è∞ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ.",
                parse_mode=ParseMode.HTML
            )
            return
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        await self.db.log_request(user_id, "image")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        processing_msg = await update.message.reply_text("üì∏ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–æ—Ç–æ...")
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ (–±–µ—Ä—ë–º –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
            photo = update.message.photo[-1]
            file = await context.bot.get_file(photo.file_id)
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image_bytes = BytesIO()
            await file.download_to_memory(image_bytes)
            image_bytes.seek(0)
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (caption)
            caption = update.message.caption
            
            # –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ OpenAI Vision
            result = await self.openai_service.analyze_food_image(
                image_bytes.read(),
                user_text=caption
            )
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –¥–µ–Ω—å
            daily_stats = await self.db.get_daily_calories(user_id)
            daily_limit = await self.db.get_user_daily_limit(user_id)
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
            await self.db.add_meal(
                user_id=user_id,
                product_name=result.get('product_name', '–ü—Ä–æ–¥—É–∫—Ç —Å —Ñ–æ—Ç–æ'),
                weight=result.get('weight'),
                calories=result.get('calories', 0),
                protein=result.get('protein', 0),
                fat=result.get('fat', 0),
                carbs=result.get('carbs', 0),
                image_processed=True
            )
            
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞ (–¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π)
            await self.db.log_key_usage(user_id, usage_type='image')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
            response = self.openai_service.format_response(
                result,
                include_daily_stats=True,
                daily_total=daily_stats['total_calories'],
                daily_limit=daily_limit
            )
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∞–Ω–∞–ª–∏–∑–∞—Ö
            access_info = await self.db.check_user_access(user_id)
            if access_info.get('key_type') == 'limited' and access_info.get('images_left') is not None:
                images_left = access_info['images_left']
                response += f"\n\nüìä –û—Å—Ç–∞–ª–æ—Å—å –∞–Ω–∞–ª–∏–∑–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {images_left}"
                if images_left <= 5:
                    response += " ‚ö†Ô∏è"
            
            await processing_msg.edit_text(response, parse_mode=ParseMode.HTML)
            logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {result.get('product_name', 'unknown')}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
            await processing_msg.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏\n"
                "‚Ä¢ –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø—Ä–æ–¥—É–∫—Ç —Ö–æ—Ä–æ—à–æ –≤–∏–¥–µ–Ω\n"
                "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ñ–æ—Ç–æ\n\n"
                "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ –±–ª—é–¥–æ —Ç–µ–∫—Å—Ç–æ–º!",
                parse_mode=ParseMode.HTML
            )
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"Update {update} caused error {context.error}")
        
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–º–æ—â–∏.",
                parse_mode=ParseMode.HTML
            )
    
    async def post_init(self, application: Application):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        await self.db.init_db()
        logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    async def token_stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /token_stats - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤"""
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
        access_info = await self.db.check_user_access(user_id)
        if not access_info.get('has_access') and not access_info.get('key_type'):
            await update.message.reply_text(
                "üîí –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞.",
                parse_mode=ParseMode.HTML
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–∫–µ–Ω–æ–≤
        stats = self.openai_service.get_token_stats()
        
        stats_message = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤</b>

üî• <b>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤:</b> {stats['total_tokens_used']:,}
üí∞ <b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> ${stats['total_cost']:.6f} ({stats['total_cost_rub']:.2f} ‚ÇΩ)
üìà <b>–ó–∞–ø—Ä–æ—Å–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:</b> {stats['requests_count']}
üìä <b>–°—Ä–µ–¥–Ω–µ–µ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å:</b> {stats['avg_tokens_per_request']:.1f}
üíµ <b>–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞:</b> ${stats['avg_cost_per_request']:.6f} ({stats['avg_cost_per_request_rub']:.2f} ‚ÇΩ)

<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞."""
        
        await update.message.reply_text(stats_message, parse_mode=ParseMode.HTML)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not config.TELEGRAM_BOT_TOKEN:
            logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return
        
        if not config.OPENAI_API_KEY:
            logger.error("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = (
            Application.builder()
            .token(config.TELEGRAM_BOT_TOKEN)
            .post_init(self.post_init)
            .build()
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("payment", self.payment_command))  # –ö–æ–º–∞–Ω–¥–∞ –æ–ø–ª–∞—Ç—ã
        application.add_handler(CommandHandler("activate", self.activate_command))
        application.add_handler(CommandHandler("key_info", self.key_info_command))
        application.add_handler(CommandHandler("stats", self.stats_command))
        application.add_handler(CommandHandler("history", self.history_command))
        application.add_handler(CommandHandler("reset", self.reset_command))
        application.add_handler(CommandHandler("token_stats", self.token_stats_command))  # –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
        application.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
        application.add_handler(MessageHandler(filters.VOICE | filters.AUDIO, self.handle_voice_audio))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ callback'–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ–ø–ª–∞—Ç—ã
        from telegram.ext import CallbackQueryHandler
        application.add_handler(CallbackQueryHandler(self.payment_callback_handler))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
        application.add_error_handler(self.error_handler)
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        application.run_polling(allowed_updates=Update.ALL_TYPES)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = CalorieCounterBot()
    bot.run()


if __name__ == "__main__":
    main()
