#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–æ—Å—Ç—É–ø–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏
"""
import asyncio
import sys
import random
import string
from database import Database
import config
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def generate_random_segment(length: int = 4) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç –∫–ª—é—á–∞ –∏–∑ –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä
    –ò—Å–∫–ª—é—á–∞–µ—Ç –ø–æ—Ö–æ–∂–∏–µ —Å–∏–º–≤–æ–ª—ã: 0/O, 1/I/l –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –≤–≤–æ–¥–∞
    """
    chars = string.ascii_uppercase.replace('O', '').replace('I', '') + string.digits.replace('0', '').replace('1', '')
    return ''.join(random.choice(chars) for _ in range(length))


def generate_key(prefix: str, suffix_length: int = 8) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∫–ª—é—á —Å –∑–∞–¥–∞–Ω–Ω—ã–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
    
    Args:
        prefix: –ü—Ä–µ—Ñ–∏–∫—Å –∫–ª—é—á–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'AILAB-UNLIM')
        suffix_length: –î–ª–∏–Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–π —á–∞—Å—Ç–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 8 —Å–∏–º–≤–æ–ª–æ–≤)
    
    Returns:
        –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –≤ —Ñ–æ—Ä–º–∞—Ç–µ PREFIX-XXXX-XXXX
    """
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —á–∞—Å—Ç—å –Ω–∞ —Å–µ–≥–º–µ–Ω—Ç—ã –ø–æ 4 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    segments = [generate_random_segment(4) for _ in range(suffix_length // 4)]
    random_part = '-'.join(segments)
    return f"{prefix}-{random_part}"


# –°–¢–ê–¢–ò–ß–ù–´–ï –ö–õ–Æ–ß–ò –° –†–ê–ó–ù–´–ú–ò –£–†–û–í–ù–Ø–ú–ò –î–û–°–¢–£–ü–ê
# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ, –Ω–æ —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –∫–ª—é—á–∏ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º seed
random.seed(42)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π seed –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏

STATIC_KEYS = {
    # 5 –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π
    'unlimited': [
        generate_key('AILAB-UNLIM') for _ in range(5)
    ],
    
    # 20 –∫–ª—é—á–µ–π –Ω–∞ 100 –∞–Ω–∞–ª–∏–∑–æ–≤
    'limit_100': [
        generate_key('AILAB-PRO100') for _ in range(20)
    ],
    
    # 20 –∫–ª—é—á–µ–π –Ω–∞ 50 –∞–Ω–∞–ª–∏–∑–æ–≤
    'limit_50': [
        generate_key('AILAB-PLUS50') for _ in range(20)
    ],
    
    # 20 –∫–ª—é—á–µ–π –Ω–∞ 20 –∞–Ω–∞–ª–∏–∑–æ–≤
    'limit_20': [
        generate_key('AILAB-BASE20') for _ in range(20)
    ]
}


def format_key_display(key: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –¥–µ—Ñ–∏—Å–∞–º
    parts = key.split('-')
    return '-'.join(parts)


async def load_keys_to_database(db: Database):
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    
    Args:
        db: –≠–∫–∑–µ–º–ø–ª—è—Ä Database
    """
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    await db.init_db()
    
    total_added = 0
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π
    logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π...")
    for key in STATIC_KEYS['unlimited']:
        await db.add_access_key(
            key_code=key,
            key_type='unlimited',
            image_limit=None
        )
        total_added += 1
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π –Ω–∞ 100 –∞–Ω–∞–ª–∏–∑–æ–≤
    logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π –Ω–∞ 100 –∞–Ω–∞–ª–∏–∑–æ–≤...")
    for key in STATIC_KEYS['limit_100']:
        await db.add_access_key(
            key_code=key,
            key_type='limited',
            image_limit=100
        )
        total_added += 1
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π –Ω–∞ 50 –∞–Ω–∞–ª–∏–∑–æ–≤
    logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π –Ω–∞ 50 –∞–Ω–∞–ª–∏–∑–æ–≤...")
    for key in STATIC_KEYS['limit_50']:
        await db.add_access_key(
            key_code=key,
            key_type='limited',
            image_limit=50
        )
        total_added += 1
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π –Ω–∞ 20 –∞–Ω–∞–ª–∏–∑–æ–≤
    logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π –Ω–∞ 20 –∞–Ω–∞–ª–∏–∑–æ–≤...")
    for key in STATIC_KEYS['limit_20']:
        await db.add_access_key(
            key_code=key,
            key_type='limited',
            image_limit=20
        )
        total_added += 1
    
    logger.info(f"–í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–ª—é—á–µ–π: {total_added}")


def save_keys_to_file(filename: str = '–ö–õ–Æ–ß–ò_–î–û–°–¢–£–ü–ê.txt'):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–π –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª"""
    with open(filename, 'w', encoding='utf-8') as f:
        f.write("=" * 80 + "\n")
        f.write("              –ö–õ–Æ–ß–ò –î–û–°–¢–£–ü–ê –ö –ë–û–¢–£ –î–õ–Ø –ü–û–î–°–ß–Å–¢–ê –ö–ê–õ–û–†–ò–ô\n")
        f.write("                        Made by AI LAB\n")
        f.write("=" * 80 + "\n\n")
        
        f.write("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:\n")
        f.write("   ‚Ä¢ Telegram: @unrealartur (https://t.me/unrealartur)\n")
        f.write("   ‚Ä¢ –î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–æ–≤—ã—Ö –∫–ª—é—á–µ–π –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ Telegram\n")
        f.write("   ‚Ä¢ –î–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏: @unrealartur\n\n")
        
        f.write("=" * 80 + "\n\n")
        
        # –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∫–ª—é—á–∏
        f.write("üîì –ë–ï–ó–õ–ò–ú–ò–¢–ù–´–ï –ö–õ–Æ–ß–ò (5 —à—Ç.) - –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–æ–≤\n")
        f.write("-" * 80 + "\n")
        for idx, key in enumerate(STATIC_KEYS['unlimited'], 1):
            f.write(f"{idx}. {key}\n")
        f.write("\n")
        
        # –ö–ª—é—á–∏ –Ω–∞ 100 –∞–Ω–∞–ª–∏–∑–æ–≤
        f.write("üíé –ö–õ–Æ–ß–ò –ù–ê 100 –ê–ù–ê–õ–ò–ó–û–í (20 —à—Ç.)\n")
        f.write("-" * 80 + "\n")
        for idx, key in enumerate(STATIC_KEYS['limit_100'], 1):
            f.write(f"{idx:2d}. {key}\n")
        f.write("\n")
        
        # –ö–ª—é—á–∏ –Ω–∞ 50 –∞–Ω–∞–ª–∏–∑–æ–≤
        f.write("‚≠ê –ö–õ–Æ–ß–ò –ù–ê 50 –ê–ù–ê–õ–ò–ó–û–í (20 —à—Ç.)\n")
        f.write("-" * 80 + "\n")
        for idx, key in enumerate(STATIC_KEYS['limit_50'], 1):
            f.write(f"{idx:2d}. {key}\n")
        f.write("\n")
        
        # –ö–ª—é—á–∏ –Ω–∞ 20 –∞–Ω–∞–ª–∏–∑–æ–≤
        f.write("üîê –ö–õ–Æ–ß–ò –ù–ê 20 –ê–ù–ê–õ–ò–ó–û–í (20 —à—Ç.)\n")
        f.write("-" * 80 + "\n")
        for idx, key in enumerate(STATIC_KEYS['limit_20'], 1):
            f.write(f"{idx:2d}. {key}\n")
        f.write("\n")
        
        f.write("=" * 80 + "\n")
        f.write("–ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ê–ö–¢–ò–í–ê–¶–ò–ò:\n")
        f.write("-" * 80 + "\n")
        f.write("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –≤ Telegram\n")
        f.write("2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: /activate\n")
        f.write("3. –í–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –∫–ª—é—á–µ–π –≤—ã—à–µ\n")
        f.write("4. –ù–∞—á–Ω–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞!\n\n")
        
        f.write("‚ö†Ô∏è  –í–ê–ñ–ù–û:\n")
        f.write("‚Ä¢ –û–¥–∏–Ω –∫–ª—é—á –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑\n")
        f.write("‚Ä¢ –ü–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–ª—é—á –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç—Å—è –∫ –≤–∞—à–µ–º—É Telegram ID\n")
        f.write("‚Ä¢ –î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–æ–≤—ã—Ö –∫–ª—é—á–µ–π: @unrealartur\n")
        f.write("=" * 80 + "\n")
    
    logger.info(f"–ö–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 80)
    print("         –ì–ï–ù–ï–†–ê–¢–û–† –°–¢–ê–¢–ò–ß–ù–´–• –ö–õ–Æ–ß–ï–ô –î–û–°–¢–£–ü–ê")
    print("                   Made by AI LAB")
    print("=" * 80)
    print()
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
    print("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–π –≤ —Ñ–∞–π–ª...")
    save_keys_to_file()
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    print("üóÑÔ∏è  –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—é—á–µ–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    db = Database(config.DATABASE_PATH)
    await load_keys_to_database(db)
    
    print()
    print("=" * 80)
    print("‚úÖ –ì–û–¢–û–í–û!")
    print("=" * 80)
    print()
    print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   ‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π: {len(STATIC_KEYS['unlimited'])}")
    print(f"   ‚Ä¢ –ö–ª—é—á–µ–π –Ω–∞ 100 –∞–Ω–∞–ª–∏–∑–æ–≤: {len(STATIC_KEYS['limit_100'])}")
    print(f"   ‚Ä¢ –ö–ª—é—á–µ–π –Ω–∞ 50 –∞–Ω–∞–ª–∏–∑–æ–≤: {len(STATIC_KEYS['limit_50'])}")
    print(f"   ‚Ä¢ –ö–ª—é—á–µ–π –Ω–∞ 20 –∞–Ω–∞–ª–∏–∑–æ–≤: {len(STATIC_KEYS['limit_20'])}")
    print(f"   ‚Ä¢ –í–°–ï–ì–û: {sum(len(v) for v in STATIC_KEYS.values())}")
    print()
    print("üìÅ –§–∞–π–ª—ã:")
    print("   ‚Ä¢ –ö–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: –ö–õ–Æ–ß–ò_–î–û–°–¢–£–ü–ê.txt")
    print(f"   ‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {config.DATABASE_PATH}")
    print()
    print("üí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("   1. –†–∞–∑–¥–∞–π—Ç–µ –∫–ª—é—á–∏ –∏–∑ —Ñ–∞–π–ª–∞ –ö–õ–Æ–ß–ò_–î–û–°–¢–£–ü–ê.txt")
    print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: python bot.py")
    print("   3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä—É—é—Ç –∫–ª—é—á–∏: /activate")
    print()
    print("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: @unrealartur (https://t.me/unrealartur)")
    print("=" * 80)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)
