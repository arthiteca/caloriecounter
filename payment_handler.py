import asyncio
import base64
from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
import logging

from payment_buttons import PaymentButtons, PaymentMessages
from config import PAYMENT_PRICES, WEBHOOK_URL
from database import Database
import config

logger = logging.getLogger(__name__)

class PaymentHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π –≤ Telegram –±–æ—Ç–µ"""
    
    def __init__(self, db: Database):
        self.db = db
        self.sbp_service = None
    
    async def handle_payment_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫ –æ–ø–ª–∞—Ç—ã"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        user_id = query.from_user.id
        
        logger.info(f"Payment callback from user {user_id}: {data}")
        
        if data == "buy_key":
            await self._handle_buy_key(query, context)
        elif data == "key_info":
            await self._handle_key_info(query, context)
        elif data == "stats":
            await self._handle_stats(query, context)
        elif data == "help":
            await self._handle_help(query, context)
        elif data == "select_tariff":
            await self._handle_select_tariff(query, context)
        elif data.startswith("tariff_"):
            tariff_key = data.replace("tariff_", "")
            await self._handle_tariff_selection(query, context, tariff_key)
        elif data.startswith("confirm_payment_"):
            tariff_key = data.replace("confirm_payment_", "")
            await self._handle_payment_confirmation(query, context, tariff_key)
        elif data.startswith("payment_qr_"):
            payment_id = data.replace("payment_qr_", "")
            await self._handle_payment_qr(query, context, payment_id)
        elif data.startswith("payment_link_"):
            payment_id = data.replace("payment_link_", "")
            await self._handle_payment_link(query, context, payment_id)
        elif data.startswith("check_status_"):
            payment_id = data.replace("check_status_", "")
            await self._handle_check_status(query, context, payment_id)
        elif data == "cancel_payment":
            await self._handle_cancel_payment(query, context)
        elif data == "back_to_main":
            await self._handle_back_to_main(query, context)
        elif data == "main_menu":
            await self._handle_main_menu(query, context)
        else:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    
    async def _handle_buy_key(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è '–ö—É–ø–∏—Ç—å –∫–ª—é—á'"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∫–ª—é—á–∞
        access_info = await self.db.check_user_access(query.from_user.id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∫–ª—é—á–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if access_info.get('has_access') or access_info.get('key_type'):
            current_key_info = f"‚úÖ <b>–¢–µ–∫—É—â–∏–π –∫–ª—é—á:</b> {access_info['message']}\n\n"
        else:
            current_key_info = "üîí <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª—é—á–∞</b>\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞ (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ)
        message_text = f"""{current_key_info}üíé <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ</b>

üîê <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏:</b>
‚Ä¢ 10 –∞–Ω–∞–ª–∏–∑–æ–≤ - 100 ‚ÇΩ
‚Ä¢ 50 –∞–Ω–∞–ª–∏–∑–æ–≤ - 400 ‚ÇΩ  
‚Ä¢ 100 –∞–Ω–∞–ª–∏–∑–æ–≤ - 700 ‚ÇΩ

üîì <b>–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –∫–ª—é—á:</b>
‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ - 1500 ‚ÇΩ

üí≥ <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–ë–ü</b>
‚ö° <b>–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è</b>
üîí <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏ –Ω–∞–¥–µ–∂–Ω–æ</b>"""
        
        await query.edit_message_text(
            message_text,
            reply_markup=PaymentButtons.get_tariff_buttons(),
            parse_mode=ParseMode.HTML
        )
    
    async def _handle_key_info(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—é—á–µ'"""
        user_id = query.from_user.id
        access_info = await self.db.check_user_access(user_id)
        
        if not access_info.get('has_access') and not access_info.get('key_type'):
            # –ù–µ—Ç –∫–ª—é—á–∞
            message_text = """‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞</b>

üîê <b>–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞</b>

üíé <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞:</b>"""
            reply_markup = PaymentButtons.get_payment_menu()
        else:
            # –ï—Å—Ç—å –∫–ª—é—á - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            key_type = access_info.get('key_type', 'unknown')
            
            if key_type == 'unlimited':
                message_text = f"""üîì <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∫–ª—é—á–µ</b>

<b>–¢–∏–ø:</b> –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π
<b>–°—Ç–∞—Ç—É—Å:</b> ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω

<b>–î–æ—Å—Ç—É–ø:</b>
‚Ä¢ ‚úÖ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ

–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π! üéâ

üì∑ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b> –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏!"""
            else:  # limited
                images_used = access_info.get('images_used', 0)
                images_left = access_info.get('images_left', 0)
                
                status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if access_info['has_access'] else "‚ùå –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω"
                
                message_text = f"""üîê <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∫–ª—é—á–µ</b>

<b>–¢–∏–ø:</b> –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π
<b>–°—Ç–∞—Ç—É—Å:</b> {status}

<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b>
‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–æ—Ç–æ: {images_used}
‚Ä¢ –û—Å—Ç–∞–ª–æ—Å—å –∞–Ω–∞–ª–∏–∑–æ–≤: {images_left}

<b>–î–æ—Å—Ç—É–ø:</b>
‚Ä¢ {"‚úÖ" if images_left > 0 else "‚ùå"} –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {images_left} —à—Ç.

üì∑ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b> –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏!"""
                
                if images_left <= 5 and images_left > 0:
                    message_text += "\n\n‚ö†Ô∏è –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ –∞–Ω–∞–ª–∏–∑–æ–≤!"
                elif images_left == 0:
                    message_text += "\n\n‚ùå –õ–∏–º–∏—Ç –∞–Ω–∞–ª–∏–∑–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω."
                    message_text += "\n\nüíé <b>–ü–æ–∫—É–ø–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞:</b> @unrealartur"
                    message_text += "\n<i>Made by AI LAB</i>"
            
            reply_markup = PaymentButtons.get_payment_menu()
        
        await query.edit_message_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    
    async def _handle_stats(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'"""
        user_id = query.from_user.id
        access_info = await self.db.check_user_access(user_id)
        
        if not access_info.get('has_access') and not access_info.get('key_type'):
            # –ù–µ—Ç –∫–ª—é—á–∞
            message_text = """üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞</b>

üîê <b>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞</b>

üíé <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞:</b>"""
            reply_markup = PaymentButtons.get_payment_menu()
        else:
            # –ï—Å—Ç—å –∫–ª—é—á - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            key_type = access_info.get('key_type', 'unknown')
            images_used = access_info.get('images_used', 0)
            images_left = access_info.get('images_left', 0)
            
            if key_type == 'unlimited':
                message_text = f"""üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üîì <b>–¢–∏–ø –∫–ª—é—á–∞:</b> –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π
üì∑ <b>–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–æ—Ç–æ:</b> {images_used}
‚ôæÔ∏è <b>–û—Å—Ç–∞–ª–æ—Å—å –∞–Ω–∞–ª–∏–∑–æ–≤:</b> –ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ

üéâ <b>–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π!</b>

üì∑ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b> –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏!"""
            else:  # limited
                total_limit = images_used + images_left
                usage_percent = (images_used / total_limit * 100) if total_limit > 0 else 0
                
                message_text = f"""üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üîê <b>–¢–∏–ø –∫–ª—é—á–∞:</b> –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π
üì∑ <b>–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ñ–æ—Ç–æ:</b> {images_used}
üìà <b>–û—Å—Ç–∞–ª–æ—Å—å –∞–Ω–∞–ª–∏–∑–æ–≤:</b> {images_left}
üìä <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</b> {usage_percent:.1f}%

<b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b>
{'‚ñà' * int(usage_percent // 10)}{'‚ñë' * (10 - int(usage_percent // 10))} {usage_percent:.1f}%

üì∑ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</b> –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏!"""
                
                if images_left <= 5 and images_left > 0:
                    message_text += "\n\n‚ö†Ô∏è –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ –∞–Ω–∞–ª–∏–∑–æ–≤!"
                elif images_left == 0:
                    message_text += "\n\n‚ùå –õ–∏–º–∏—Ç –∞–Ω–∞–ª–∏–∑–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω."
                    message_text += "\n\nüíé <b>–ü–æ–∫—É–ø–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞:</b> @unrealartur"
                    message_text += "\n<i>Made by AI LAB</i>"
            
            reply_markup = PaymentButtons.get_payment_menu()
        
        await query.edit_message_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    
    async def _handle_help(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è '–ü–æ–º–æ—â—å'"""
        message_text = """‚ùì <b>–ü–æ–º–æ—â—å –ø–æ –æ–ø–ª–∞—Ç–µ</b>

<b>–ö–∞–∫ –∫—É–ø–∏—Ç—å –∫–ª—é—á:</b>
1. –ù–∞–∂–º–∏—Ç–µ "üíé –ö—É–ø–∏—Ç—å –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞"
2. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ
3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É
4. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã (QR-–∫–æ–¥ –∏–ª–∏ —Å—Å—ã–ª–∫–∞)
5. –û–ø–ª–∞—Ç–∏—Ç–µ —á–µ—Ä–µ–∑ –°–ë–ü
6. –ö–ª—é—á –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

<b>–¢–∞—Ä–∏—Ñ—ã:</b>
üîê <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ:</b> 10/50/100 –∞–Ω–∞–ª–∏–∑–æ–≤
üîì <b>–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π:</b> –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ

<b>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</b>
üí≥ –°–ë–ü (–°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π)
üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã

<b>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:</b>
‚úÖ –ö–ª—é—á –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ
üì± –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
üéâ –ú–æ–∂–µ—Ç–µ —Å—Ä–∞–∑—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
üìû @unrealartur - –ø–æ–º–æ—â—å –ø–æ –æ–ø–ª–∞—Ç–µ
üí¨ @unrealartur - —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

<b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
üîí –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞—â–∏—â–µ–Ω—ã
üõ°Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º
‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã"""
        
        await query.edit_message_text(
            message_text,
            reply_markup=PaymentButtons.get_payment_menu(),
            parse_mode=ParseMode.HTML
        )
    
    async def _handle_select_tariff(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞"""
        await query.edit_message_text(
            PaymentMessages.get_tariff_selection_text(),
            reply_markup=PaymentButtons.get_tariff_buttons(),
            parse_mode=ParseMode.HTML
        )
    
    async def _handle_tariff_selection(self, query, context, tariff_key):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞"""
        if tariff_key not in PAYMENT_PRICES:
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ –∏ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await query.edit_message_text(
            PaymentMessages.get_tariff_info_text(tariff_key),
            reply_markup=PaymentButtons.get_payment_confirmation(tariff_key),
            parse_mode=ParseMode.HTML
        )
    
    async def _handle_payment_confirmation(self, query, context, tariff_key):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã"""
        tariff_data = PAYMENT_PRICES.get(tariff_key, {})
        price = tariff_data.get("price", 0)
        description = tariff_data.get("description", "")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
        await query.edit_message_text(
            PaymentMessages.get_payment_processing_text("creating...", price),
            parse_mode=ParseMode.HTML
        )
        
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –°–ë–ü
            # –ü–æ–∫–∞ —á—Ç–æ —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            payment_id = f"test_{query.from_user.id}_{int(asyncio.get_event_loop().time())}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ë–î (–∑–∞–≥–ª—É—à–∫–∞)
            await self.db.add_sbp_payment(
                user_id=query.from_user.id,
                payment_id=payment_id,
                amount=price,
                description=f"–ü–æ–∫—É–ø–∫–∞ –∫–ª—é—á–∞ - {description}",
                payment_url="https://example.com/payment",
                qr_code=""
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
            await query.edit_message_text(
                f"""üí≥ <b>–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω</b>

üÜî <b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> {payment_id}
üí∞ <b>–°—É–º–º–∞:</b> {price} ‚ÇΩ
üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}

<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>""",
                reply_markup=PaymentButtons.get_payment_method_buttons(payment_id),
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
            await query.edit_message_text(
                PaymentMessages.get_payment_failed_text("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"),
                reply_markup=PaymentButtons.get_support_buttons(),
                parse_mode=ParseMode.HTML
            )
    
    async def _handle_payment_qr(self, query, context, payment_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –ø–æ QR-–∫–æ–¥—É"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞
        await query.edit_message_text(
            f"""üì± <b>–û–ø–ª–∞—Ç–∞ –ø–æ QR-–∫–æ–¥—É</b>

üÜî <b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> {payment_id}

<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>
1. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±–∞–Ω–∫–∞
2. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É
3. –ö–ª—é—á –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

‚è∞ <b>–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è:</b> 15 –º–∏–Ω—É—Ç""",
            reply_markup=PaymentButtons.get_payment_status_buttons(payment_id),
            parse_mode=ParseMode.HTML
        )
    
    async def _handle_payment_link(self, query, context, payment_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –ø–æ —Å—Å—ã–ª–∫–µ"""
        await query.edit_message_text(
            f"""üîó <b>–û–ø–ª–∞—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ</b>

üÜî <b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> {payment_id}

<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: https://example.com/pay/{payment_id}
2. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É
3. –ö–ª—é—á –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

‚è∞ <b>–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è:</b> 15 –º–∏–Ω—É—Ç""",
            reply_markup=PaymentButtons.get_payment_status_buttons(payment_id),
            parse_mode=ParseMode.HTML
        )
    
    async def _handle_check_status(self, query, context, payment_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        await query.edit_message_text(
            f"""üîÑ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞</b>

üÜî <b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> {payment_id}

‚è≥ <b>–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞...</b>

<b>–°—Ç–∞—Ç—É—Å:</b> –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
<b>–í—Ä–µ–º—è:</b> {asyncio.get_event_loop().time():.0f}""",
            reply_markup=PaymentButtons.get_payment_status_buttons(payment_id),
            parse_mode=ParseMode.HTML
        )
    
    async def _handle_cancel_payment(self, query, context):
        """–û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        await query.edit_message_text(
            "‚ùå <b>–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=PaymentButtons.get_back_button(),
            parse_mode=ParseMode.HTML
        )
    
    async def _handle_back_to_main(self, query, context):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await query.edit_message_text(
            PaymentMessages.get_payment_menu_text(),
            reply_markup=PaymentButtons.get_payment_menu(),
            parse_mode=ParseMode.HTML
        )
    
    async def _handle_main_menu(self, query, context):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞
        await query.edit_message_text(
            "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=PaymentButtons.get_payment_menu(),
            parse_mode=ParseMode.HTML
        )
