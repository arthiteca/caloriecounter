import asyncio
import base64
from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ParseMode
import logging

from payment_buttons import PaymentButtons, PaymentMessages
from config import PAYMENT_PRICES, WEBHOOK_URL
from database import Database
import config

logger = logging.getLogger(__name__)

class PaymentHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π –≤ Telegram –±–æ—Ç–µ"""
    
    def __init__(self, db: Database):
        self.db = db
        self.sbp_service = None
    
    async def handle_payment_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫ –æ–ø–ª–∞—Ç—ã"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        user_id = query.from_user.id
        
        logger.info(f"Payment callback from user {user_id}: {data}")
        
        if data == "buy_key":
            await self._handle_buy_key(query, context)
        elif data == "select_tariff":
            await self._handle_select_tariff(query, context)
        elif data.startswith("tariff_"):
            tariff_key = data.replace("tariff_", "")
            await self._handle_tariff_selection(query, context, tariff_key)
        elif data.startswith("confirm_payment_"):
            tariff_key = data.replace("confirm_payment_", "")
            await self._handle_payment_confirmation(query, context, tariff_key)
        elif data.startswith("payment_qr_"):
            payment_id = data.replace("payment_qr_", "")
            await self._handle_payment_qr(query, context, payment_id)
        elif data.startswith("payment_link_"):
            payment_id = data.replace("payment_link_", "")
            await self._handle_payment_link(query, context, payment_id)
        elif data.startswith("check_status_"):
            payment_id = data.replace("check_status_", "")
            await self._handle_check_status(query, context, payment_id)
        elif data == "cancel_payment":
            await self._handle_cancel_payment(query, context)
        elif data == "back_to_main":
            await self._handle_back_to_main(query, context)
        elif data == "main_menu":
            await self._handle_main_menu(query, context)
        else:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    
    async def _handle_buy_key(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è '–ö—É–ø–∏—Ç—å –∫–ª—é—á'"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –∫–ª—é—á
        access_info = await self.db.check_user_access(query.from_user.id)
        if access_info['has_access'] or access_info.get('key_type'):
            await query.edit_message_text(
                f"‚úÖ –£ –≤–∞—Å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∫–ª—é—á!\n\n"
                f"üìä {access_info['message']}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—é—á–µ' –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
                reply_markup=PaymentButtons.get_back_button(),
                parse_mode=ParseMode.HTML
            )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞
        await query.edit_message_text(
            PaymentMessages.get_tariff_selection_text(),
            reply_markup=PaymentButtons.get_tariff_buttons(),
            parse_mode=ParseMode.HTML
        )
    
    async def _handle_select_tariff(self, query, context):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞"""
        await query.edit_message_text(
            PaymentMessages.get_tariff_selection_text(),
            reply_markup=PaymentButtons.get_tariff_buttons(),
            parse_mode=ParseMode.HTML
        )
    
    async def _handle_tariff_selection(self, query, context, tariff_key):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞"""
        if tariff_key not in PAYMENT_PRICES:
            await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∞—Ä–∏—Ñ")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ –∏ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await query.edit_message_text(
            PaymentMessages.get_tariff_info_text(tariff_key),
            reply_markup=PaymentButtons.get_payment_confirmation(tariff_key),
            parse_mode=ParseMode.HTML
        )
    
    async def _handle_payment_confirmation(self, query, context, tariff_key):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã"""
        tariff_data = PAYMENT_PRICES.get(tariff_key, {})
        price = tariff_data.get("price", 0)
        description = tariff_data.get("description", "")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
        await query.edit_message_text(
            PaymentMessages.get_payment_processing_text("creating...", price),
            parse_mode=ParseMode.HTML
        )
        
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –°–ë–ü
            # –ü–æ–∫–∞ —á—Ç–æ —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            payment_id = f"test_{query.from_user.id}_{int(asyncio.get_event_loop().time())}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ë–î (–∑–∞–≥–ª—É—à–∫–∞)
            await self.db.add_sbp_payment(
                user_id=query.from_user.id,
                payment_id=payment_id,
                amount=price,
                description=f"–ü–æ–∫—É–ø–∫–∞ –∫–ª—é—á–∞ - {description}",
                payment_url="https://example.com/payment",
                qr_code=""
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
            await query.edit_message_text(
                f"""üí≥ <b>–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω</b>

üÜî <b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> {payment_id}
üí∞ <b>–°—É–º–º–∞:</b> {price} ‚ÇΩ
üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}

<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>""",
                reply_markup=PaymentButtons.get_payment_method_buttons(payment_id),
                parse_mode=ParseMode.HTML
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
            await query.edit_message_text(
                PaymentMessages.get_payment_failed_text("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"),
                reply_markup=PaymentButtons.get_support_buttons(),
                parse_mode=ParseMode.HTML
            )
    
    async def _handle_payment_qr(self, query, context, payment_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –ø–æ QR-–∫–æ–¥—É"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞
        await query.edit_message_text(
            f"""üì± <b>–û–ø–ª–∞—Ç–∞ –ø–æ QR-–∫–æ–¥—É</b>

üÜî <b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> {payment_id}

<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>
1. –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±–∞–Ω–∫–∞
2. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É
3. –ö–ª—é—á –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

‚è∞ <b>–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è:</b> 15 –º–∏–Ω—É—Ç""",
            reply_markup=PaymentButtons.get_payment_status_buttons(payment_id),
            parse_mode=ParseMode.HTML
        )
    
    async def _handle_payment_link(self, query, context, payment_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –ø–æ —Å—Å—ã–ª–∫–µ"""
        await query.edit_message_text(
            f"""üîó <b>–û–ø–ª–∞—Ç–∞ –ø–æ —Å—Å—ã–ª–∫–µ</b>

üÜî <b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> {payment_id}

<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: https://example.com/pay/{payment_id}
2. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É
3. –ö–ª—é—á –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

‚è∞ <b>–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è:</b> 15 –º–∏–Ω—É—Ç""",
            reply_markup=PaymentButtons.get_payment_status_buttons(payment_id),
            parse_mode=ParseMode.HTML
        )
    
    async def _handle_check_status(self, query, context, payment_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        await query.edit_message_text(
            f"""üîÑ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞</b>

üÜî <b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> {payment_id}

‚è≥ <b>–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞...</b>

<b>–°—Ç–∞—Ç—É—Å:</b> –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
<b>–í—Ä–µ–º—è:</b> {asyncio.get_event_loop().time():.0f}""",
            reply_markup=PaymentButtons.get_payment_status_buttons(payment_id),
            parse_mode=ParseMode.HTML
        )
    
    async def _handle_cancel_payment(self, query, context):
        """–û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        await query.edit_message_text(
            "‚ùå <b>–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=PaymentButtons.get_back_button(),
            parse_mode=ParseMode.HTML
        )
    
    async def _handle_back_to_main(self, query, context):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await query.edit_message_text(
            PaymentMessages.get_payment_menu_text(),
            reply_markup=PaymentButtons.get_payment_menu(),
            parse_mode=ParseMode.HTML
        )
    
    async def _handle_main_menu(self, query, context):
        """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞
        await query.edit_message_text(
            "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=PaymentButtons.get_payment_menu(),
            parse_mode=ParseMode.HTML
        )
